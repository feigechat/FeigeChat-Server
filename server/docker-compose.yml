#
# docker compose 服务编排
#

version: '3.4'

services:
  mysql:
    image: 'mysql:5.7'
    restart: always
    container_name: cim_mysql
    environment:
      LANG: C.UTF-8 # 解决客户端连接中文乱码问题
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: coffeechat
      MYSQL_USER: cim
      MYSQL_PASSWORD: ldMe$q2Xl9GKyUxj
    volumes:
      - cim_mysql_data:/var/lib/mysql
      # docker-entrypoint-initdb.d：这个目录下的脚本，只在容器第一次运行时被执行。
      - ./setup/mysql/init/:/docker-entrypoint-initdb.d/
    networks:
      - local
    ports:
      - "3306:3306"
    command: [ '--default-authentication-plugin=mysql_native_password', '--character-set-server=utf8mb4',
               '--collation-server=utf8mb4_unicode_ci' ]
  redis:
    build: ./setup/redis
    container_name: cim_redis
    volumes:
      - cim_redis:/data  # 持久化数据，其他如密码等，在redis.conf里已配置
    networks:
      - local
    ports:
      - "6379:6379"     # 端口改掉，预防攻击
  consul:
    image: bitnami/consul:latest
    volumes:
      - cim_consul:/bitnami
    networks:
      - local
    ports:
      - '8300:8300'
      - '8301:8301'
      - '8301:8301/udp'
      - '8500:8500'
      - '8600:8600'
      - '8600:8600/udp'
  im_http: # http 服务
    container_name: im_http
    build: # 指定从dockerfile编译
      context: .
      dockerfile: app/im_http/Dockerfile
    volumes: # 数据卷绑定
      - ./log/http:/log
    networks:
      - local
    ports:
      - "18080:18080"
    depends_on:
      - im_logic
  im_gate: # 网关服务
    container_name: im_gate
    build:
      context: .
      dockerfile: app/im_gate/Dockerfile
    volumes:
      - ./log/gate:/log
    networks:
      - local
    ports:
      - "8000:8000"
    depends_on:
      - im_logic
  im_logic: # 逻辑服务
    container_name: im_logic
    build:
      context: .
      dockerfile: app/im_logic/Dockerfile
    volumes:
      - ./log/logic:/log
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - local
    #  local:
    #    - ipv4_address: 172.16.0.100
    depends_on:
      - mysql
      - redis
volumes: # 声明使用的数据卷，不使用宿主机目录，可以自行更改
  cim_mysql_data: # mysql数据卷
    driver: local
  cim_redis: # redis数据卷
    driver: local
  cim_consul:
    driver: local
# 为了简单，使用默认侨接网络 + DNS连接内部服务器方式
# # 根据https://docs.docker.com/compose/networking/，docker compose默认创建了网络，但是创建自己的侨接网络更安全
# #，另外一个Host主机网络只支持Linux，虽然性能更高
networks:
  local:
    driver: bridge # 侨接网络